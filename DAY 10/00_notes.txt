NOTES FOR DAY 10

# Higher Order Function
    - Higher order functions are functions which take other function as a parameter or return a function as a value

** Callback **    
    - The function passed as a parameter is called callback.

# Setting Time
    1. Setting Interval using a setInterval function
        - used to do some activity continuously with in some interval of time
        - takes a callback function and a duration as a parameter
        - duration is in milliseconds and the callback will be always called in that interval of time
        Syntax : 
            function callback() {
                // code goes here
            }
            setInterval(callback, duration);

    2. Setting a time using a setTimeout
        - used to execute some action at some time in the future
        - takes a callback function and a duration as a parameter
        - the duration is in milliseconds and the callback wait for that amount of time
        Syntax : 
            function callback() {
                // code goes here
            }
            setTimeout(callback, duration); // duration in milliseconds


# Functional Programming
    - bulitin methods which help in solving complicated methods 
    - all bulitin methods take callback function 

    1. forEach
        - Iterate an array elements
        - used only for arrays
        - It takes a callback function with elements, index parameter and array itself
    
    2. map
        - Iterate an array elements and modify the array elements
        - It takes a callback function with elements, index , array parameter and return a new array

    3. Filter
        - Filter out items which full fill filtering conditions and return a new array

    4. reduce
        - Reduce takes a callback function
        - The call back function takes accumulator, current, and optional initial value as a parameter and returns a single value
        - If we do not specify accumulator parameter, by default accumulator will get array first value
        - If our array is an empty array, then Javascript will throw an error
        Syntax:
            arr.reduce((acc, cur) => {
                // some operations goes here before returning a value
                return 
            }, initialValue)
    
    5. every
        - Check if all the elements are similar in one aspect. It returns boolean

    6. find
        - Return the first element which satisfies the condition

    7. findIndex
        - Return the position of the first element which satisfies the condition

    8. some
        - Check if some of the elements are similar in one aspect. It returns boolean

    9. sort
        - The sort methods arranges the array elements either ascending or descending order
        - By default, the sort() method sorts values as strings

    