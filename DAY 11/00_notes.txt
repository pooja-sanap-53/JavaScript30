NOTES FOR DAY 11

#SET
    - Set is a collection of elements
    - Set can only contain unique elements
    - Set is an iterable object and we can iterate through each element

** Creating an empty set **
    Syntax :
        const setName = new Set();

** Adding elements to a set **
    Syntax :
        setName.add("newElement");

** Deleting element from a set **
    Syntax :
        setName.delete("removeElement");

** The forEach() Method **
    - The forEach() method invokes (calls) a function for each Set element

** The values() Method **
    - The values() method returns a new iterator object containing all the values in a Set
    Syntax : 
        setName.values();   

** has() **
	- Returns true if a value exists in the Set

** Union **
    - can be achieved using spread operator

** Intersection **
    - can be achieved using filter

** Difference **
    - can be achieved using filter 


#MAP
    - A Map holds key-value pairs where the keys can be any datatype
    - A Map remembers the original insertion order of the key

** Creating an empty map **
    - can create a Map by passing an Array to the new Map() constructor
    Syntax :
        const mapName = new Map();

** The set() Method **
    - can add elements to a Map with the set() method
    - can also be used to change existing Map values
    Syntax : 
        mapName.set("key" : value);

** The get() Method **
    - The get() method gets the value of a key in a Map
    Syntax : 
        mapName.get("key");

** The forEach() Method **
    - The forEach() method invokes (calls) a function for each key/value pair in a Map

** The entries() Method **
    - The entries() method returns an iterator object with the [key, values] in a Map
    Syntax : 
        mapName.entries();   

** has() **
	- Returns true if a value exists in the Set


# DIFFERENCE BETWEEN JAVASCRIPT OBJECTS AND MAP 

Property                            Object	                                Map

Iterable	                Not directly iterable	                Directly iterable
Size	                 Do not have a size property	           Have a size property
Key Types	           Keys must be Strings (or Symbols)	      Keys can be any datatype
Key Order	               Keys are not well ordered	        Keys are ordered by insertion
Defaults	                   Have default keys	               Do not have default keys
