NOTES FOR DAY 14 

#ERROR HANDLING 

- When executing JavaScript code, different errors can occur
- Errors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things
- We can ctach runtime errors using error-handling mechanism


try:
    - Wrap suspicious code that may throw an error in try block
    - The try statement allows us to define a block of code to be tested for errors while it is being executed

catch: 
    - Write code to do something in catch block when an error occurs
    - The catch block can have parameters that will give you error information
    - Catch block is used to log an error or display specific messages to the user

finally: 
    - finally block will always be executed regardless of the occurrence of an error
    - The finally block can be used to complete the remaining task or reset variables that might have changed before error occurred in try block

throw: 
    - the throw statement allows us to create a custom error
    - We can through a string, number, boolean or an object
    - Use the throw statement to throw an exception
    - When you throw an exception, expression specifies the value of the exception

Syntax:
    try {
    // code that may throw an error
    } catch (err) {
    // code to be executed if an error occurs
    } finally {
    // code to be executed regardless of an error occurs or not
    }

    throw "example error";

#Error Types
    1. ReferenceError
        - An illegal reference has occurred
        - A ReferenceError is thrown if we use a variable that has not been declared

    2. SyntaxError
        - A syntax error has occurred

    3. TypeError
        - A type error has occurred

    